
* Package_management
#+begin_src emacs-lisp
 (defvar bootstrap-version)
 (let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
       (bootstrap-version 5))
   (unless (file-exists-p bootstrap-file)
     (with-current-buffer
         (url-retrieve-synchronously
          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
          'silent 'inhibit-cookies)
       (goto-char (point-max))
       (eval-print-last-sexp)))
   (load bootstrap-file nil 'nomessage))
 
 (setq package-enable-at-startup nil)
 (straight-use-package 'use-package)
(setq package-archives '(("gnu"   . "https://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                         ("melpa" . "https://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
(eval-when-compile
  ;; Following line is not needed if use-package.el is in ~/.emacs.d
  (add-to-list 'load-path "~/.emacs.d/lisp/use-package")
  (require 'use-package))
#+end_src
* Init
#+begin_src emacs-lisp
(setenv "PATH" "/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:/Users/waytrue/.cargo/bin")
(menu-bar-mode -1)
(tool-bar-mode -1)

(scroll-bar-mode -1)

(setq-default cursor-type 'bar)

;;(setq split-height-threshold nil)
;;(setq split-width-threshold 0)

(setq inhibit-splash-screen 1)


(use-package dashboard 
  :ensure t
  :init
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text") 
                                    (bookmarks . "book")))
  ;; 设置标题
  (setq dashboard-banner-logo-title
        "Namoamithaba!")
  ;; 设置banner
  (setq dashboard-center-content t) 
  (setq dashboard-set-heading-icons t) 
  (setq dashboard-set-file-icons t) 
  (setq dashboard-set-navigator t))
#+end_src
* Font&UI
#+begin_src emacs-lisp


(setq org-image-actual-width '(600))

(defun font-installed-p (font-name)
  "Check if font with FONT-NAME is available."
  (find-font (font-spec :name font-name)))
(when (display-graphic-p)
  ;; Set default font
  (cl-loop for font in '("SF Mono" "Hack" "Source Code Pro" "JetBrainsMono Nerd Font" "Fira Code" "Sarasa Mono SC Nerd"
                         "Menlo" "Monaco" "DejaVu Sans Mono" "Consolas")
           when (font-installed-p font)
           return (set-face-attribute 'default nil
                                      :font font
                                      :height  160))

  ;; Specify font for all unicode characters
  (cl-loop for font in '("Apple Color Emoji" "Segoe UI Symbol" "Symbola" "Symbol")
           when (font-installed-p font)
           return(set-fontset-font t 'unicode font nil 'prepend))

  ;; Specify font for Chinese characters
  )

(use-package all-the-icons
  :ensure t)

(use-package all-the-icons-dired
		   :ensure t
		   :hook ('dired-mode . 'all-the-icons-dired-mode))

(use-package solarized-theme
  :ensure t
  :config
(use-package doom-themes
  :ensure t)
(load-theme 'doom-dark+ t))
(use-package 
  doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom
  (doom-modeline-height 10)
  (doom-modeline-bar-width 3)
  (doom-modeline-buffer-file-name-style 'file-name))

(use-package 
  rainbow-delimiters 
  :ensure t 
  :defer 2
  :config
  ;; 设置每一级括号的颜色
  (set-face-foreground 'rainbow-delimiters-depth-1-face "chartreuse3") 
  (set-face-foreground 'rainbow-delimiters-depth-2-face "DodgerBlue1") 
  (set-face-foreground 'rainbow-delimiters-depth-3-face "DarkOrange2")
  (set-face-foreground 'rainbow-delimiters-depth-4-face "deep pink") 
  (set-face-foreground 'rainbow-delimiters-depth-5-face "medium orchid") 
  (set-face-foreground 'rainbow-delimiters-depth-6-face "turquoise") 
  (set-face-foreground 'rainbow-delimiters-depth-7-face "lime green") 
  (set-face-foreground 'rainbow-delimiters-depth-8-face "gold") 
  (set-face-foreground 'rainbow-delimiters-depth-9-face "cyan") 
  (set-face-bold 'rainbow-delimiters-depth-1-face "t") 
  (set-face-bold 'rainbow-delimiters-depth-2-face "t") 
  (set-face-bold 'rainbow-delimiters-depth-3-face "t") 
  (set-face-bold 'rainbow-delimiters-depth-4-face "t") 
  (set-face-bold 'rainbow-delimiters-depth-5-face "t") 
  (set-face-bold 'rainbow-delimiters-depth-6-face "t") 
  (set-face-bold 'rainbow-delimiters-depth-7-face "t") 
  (set-face-bold 'rainbow-delimiters-depth-8-face "t") 
  (set-face-bold 'rainbow-delimiters-depth-9-face "t") 
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
;; 让info帮助信息中关键字有高亮
(use-package
  info-colors 
  :ensure t 
  :hook ('Info-selection-hook . 'info-colors-fontify-node))

;; 缩进线
(use-package
  indent-guide
  :ensure t
  :defer t
  :hook (prog-mode . indent-guide-mode))

#+end_src
* Behavior&Input
#+begin_src emacs-lisp

(use-package evil
  :ensure t
  :init
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
)

(use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

(setq evil-org-set-key-theme '(navigation insert textobjects additional calendar))
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init)
  :custom (evil-collection-setup-minibuffer t))

(use-package format-all
  :defer t
  :ensure t)

(defun my/changeinput2en()
    "this is a function automatic changing input method to en"
  (interactive)
(if (eq major-mode 'org-mode)
  (shell-command "im-select com.apple.keylayout.ABC")))

(defun my/changeinput2cn()
    "this is a function automatic changing input method to en"
  (interactive)
(if (eq major-mode 'org-mode)
  (shell-command "im-select com.sogou.inputmethod.sogou.pinyin")))
(add-hook 'evil-insert-state-entry-hook #'my/changeinput2cn)
(add-hook 'evil-insert-state-exit-hook #'my/changeinput2en)

(defun my/changeinto-roam-link ()
    "changeinto-Org-roam link."
    (interactive)
    (backward-kill-word 1)
    (my/insert-roam-link)
    (yank 1))
(defun my/insert-roam-link ()
    "Inserts an Org-roam link."
    (interactive)
    (insert "[[roam:]]")
    (backward-char 2))

(defun my/auto-highlighting ()
    "auto-highlighting"
    (interactive)
    (backward-word)
    (insert "~")
    (forward-word)
    (insert "~")
    (forward-char 1))

(defun my/auto-strikethrough()
    "auto-highlighting"
    (interactive)
    (backward-word)
    (insert "+")
    (forward-word)
    (insert "+")
    (forward-char 1))

(defun my/auto-bold()
    "auto-highlighting"
    (interactive)
    (backward-word)
    (insert "*")
    (forward-word)
    (insert "*")
    (forward-char 1))

(defun my/auto-underline()
    "auto-underline"
    (interactive)
    (backward-word)
    (insert "_")
    (forward-word)
    (insert "_")
    (forward-char 1))


(setcdr evil-insert-state-map nil)

(define-key evil-insert-state-map [escape] 'evil-normal-state)
(define-key evil-normal-state-map (kbd "DEL") 'org-mark-ring-goto)
(define-key evil-normal-state-map (kbd "Q") 'kill-buffer-and-window)
(define-key evil-normal-state-map (kbd "S") 'save-buffer)
(define-key evil-insert-state-map (kbd "M-[") #'my/insert-roam-link)
(define-key evil-insert-state-map (kbd "M-]") #'my/changeinto-roam-link)
(define-key evil-insert-state-map (kbd "M-}") #'my/auto-rice-English-Word)
(define-key evil-insert-state-map (kbd "M-~") #'my/auto-highlighting)
(define-key evil-insert-state-map (kbd "M-*") #'my/auto-bold)
(define-key evil-insert-state-map (kbd "M-+") #'my/auto-strikethrough)
(define-key evil-insert-state-map (kbd "M-_") #'my/auto-underline)


(global-set-key (kbd "C-x C-d") 'dired)

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c i") 'org-insert-link)
;; 设置 org-agenda 打开快捷键
(global-set-key (kbd "C-c a") 'org-agenda)
;; org-capture
(global-set-key (kbd "<f6>") 'org-capture)

;; occurmode
(global-set-key (kbd "M-s o") 'occur-dwim)

;; iedit
(global-set-key (kbd "M-s e") 'iedit-mode)
;; imenu
(global-set-key (kbd "M-s i") 'counsel-imenu)
;; ivy
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x c-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+end_src
* BasicImprove
#+begin_src emacs-lisp

(use-package hungry-delete
  :ensure t
  :defer t
  :config (hungry-delete-mode 1)
  )

(use-package which-key
    :ensure t
    :config
    (which-key-mode))

(use-package cl-lib
  :ensure t)


(use-package flycheck
  :ensure t
  :defer 2
  :config (global-flycheck-mode))


(use-package company 
  :ensure t
  :defer 2 
  :hook (after-init . global-company-mode) 
  :init (setq company-tooltip-align-annotations t company-idle-delay 0 company-echo-delay 0
	      company-minimum-prefix-length 2 company-require-match nil company-dabbrev-ignore-case
	      nil company-dabbrev-downcase nil company-show-numbers t) 
  :config 
  :bind (:map company-active-map
	      ("M-n" . nil) 
	      ("M-p" . nil) 
	      ("C-n" . #'company-select-next) 
	      ("C-p" . #'company-select-previous)))

(use-package counsel
  :ensure t
  :commands
  (counsel-mode)
)
(use-package smartparens
  :ensure t
  :config
 (sp-local-pair '(emacs-lisp-mode lisp-interaction-mode) "'" nil :actions nil)
  (smartparens-global-mode)
)
(use-package ivy
  :ensure t
  :config
  (ivy-mode)
  )
(use-package ivy-rich
  :ensure t
  :config
  (ivy-rich-mode))
(use-package ivy-posframe
  :ensure t
  :config
   (setq ivy-posframe-display-functions-alist '((0 . ivy-posframe-display-at-window-center)))
   (ivy-posframe-mode 1))

(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)

(setq make-backup-files nil)
(setq auto-save-default nil)

(setq create-lockfiles nil)
;; 关闭自动换行
;; (setq truncate-partial-width-windows t)
;; 回车时创建新行并且对齐
(global-set-key (kbd "<escape>")      'keyboard-escape-quit)
;; Dired-mode 默认递归
(setq dired-recursive-deletes 'always)
(setq dired-recursive-copies 'always)
;; Emacsn能从剪贴板读取内容
(setq x-select-enable-clipboard t
      x-select-enable-primary t)
;; Dired-mode 只用一个buffer
(put 'dired-find-alternate-file 'disabled nil)

(define-advice show-paren-function (:around (fn) fix-show-paren-function)
  "Highlight enclosing parens."
  (cond ((looking-at-p "\\s(") (funcall fn))
	(t (save-excursion
	     (ignore-errors (backward-up-list))
	     (funcall fn)))))
;; 删除换行符
(defun remove-dos-eol ()
  "Replace DOS eolns CR LF with Unix eolns CR"
  (interactive)
  (goto-char (point-min))
  (while (search-forward "\r" nil t) (replace-match "")))

;; 选中一个区域后,输入一个字母会替代当前区域
(delete-selection-mode 1)

;; 关闭警告音量
(setq ring-bell-function 'ignore)

;; 简化yes or no
(fset 'yes-or-no-p 'y-or-n-p)

(use-package perspeen
  :ensure t
  :diminish 
  :init
  ;; (setq perspeen-use-tab t)
  (setq perspeen-keymap-prefix [C-tab]) 
  :config (perspeen-mode))

(use-package yasnippet-snippets
  :ensure t
  :config
  )
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1))

;; 撤销树
(use-package 
  undo-tree 
  :ensure t 
  :hook (after-init . global-undo-tree-mode) 
  :init (setq undo-tree-visualizer-timestamps t undo-tree-enable-undo-in-region nil undo-tree-auto-save-history nil)

  ;; HACK: keep the diff window
  (with-no-warnings (make-variable-buffer-local 'undo-tree-visualizer-diff) 
		    (setq-default undo-tree-visualizer-diff t)))

;; Use embedded webkit browser if possible
  (when (featurep 'xwidget-internal)
    (push '("\\.\\(x?html?\\|pdf\\)\\'"
	    .
	    (lambda (file _link)
	      (xwidget-webkit-browse-url (concat "file://" file))
	      (let ((buf (xwidget-buffer (xwidget-webkit-current-session))))
		(when (buffer-live-p buf)
		  (and (eq buf (current-buffer)) (quit-window))
		  (pop-to-buffer buf)))))
	  org-file-apps))

(use-package recentf
  :straight t
  :bind (("C-x C-r" . recentf-open-files))
  :hook (after-init . recentf-mode)
  :init (setq recentf-max-saved-items 300
	      recentf-exclude
	      '("\\.?cache" ".cask" "url" "COMMIT_EDITMSG\\'" "bookmarks"
		"\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
		"\\.?ido\\.last$" "\\.revive$" "/G?TAGS$" "/.elfeed/"
		"^/tmp/" "^/var/folders/.+$" "^/ssh:" "/persp-confs/"
		(lambda (file) (file-in-directory-p file package-user-dir))))
  :config
  (push (expand-file-name recentf-save-file) recentf-exclude)
  (add-to-list 'recentf-filename-handlers #'abbreviate-file-name))
#+end_src
* UsefulApps
#+begin_src emacs-lisp

(use-package youdao-dictionary
	:ensure t
	:config 
	(global-set-key (kbd "C-c y") 'youdao-dictionary-search-at-point))

(use-package magit
 :ensure t
 :defer t
 :commands (magit)
       )

(use-package pdf-tools
  :ensure t
  :bind ( :map pdf-view-mode-map
	               ("j" .  pdf-view-next-line-or-next-page)
		       ("k" .  pdf-view-previous-line-or-previous-page)
		       ("l" .  image-forward-hscroll)
		       ("h" .  image-backward-hscroll)
		       ("J" .  pdf-view-next-page)
		       ("K" .  pdf-view-previous-page)
		       ("u" .  pdf-view-scroll-down-or-previous-page)
		       ("d" .  pdf-view-scroll-up-or-next-page)
		       ("0" .  image-bol)
		       ("$" .  image-eol)
	 )
  )

#+end_src
* Org
#+begin_src emacs-lisp

(use-package org
  :defer 2
  :config
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 0
        org-hide-block-startup nil
        org-src-preserve-indentation nil
        org-cycle-separator-lines 2
	org-id-method 'ts
	org-id-link-to-org-use-id t
	org-return-follows-link t)
  )
(use-package org-ref
:ensure t)

(setq reftex-default-bibliography '("~/org/references.bib"))

;; see org-ref for use of these variables
(setq org-ref-bibliography-notes "~/org/notes.org"
      org-ref-default-bibliography '("~/org/references.bib")
      org-ref-pdf-directory "~/Org/bibliography/bibtex-pdfs/")

(org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (C . t)
        (java . t)
        (js . t)
        (ruby . t)
        (ditaa . t)
        (python . t)
        (shell . t)
        (latex . t)
        (plantuml . t)
        (R . t)))

(setq org-use-sub-superscripts "{}")

(setq org-log-done 'time)
;; 设置默认 org agenda 文件目录
(setq org-agenda-files '("~/org"))
(setq org-startup-indented t)

(add-hook 'org-mode-hook #'toggle-truncate-lines)

(use-package valign
  :ensure t
  :hook
  (org-mode . valign-mode))

(use-package org-download
  :after org
  :ensure t
  :config
  (setq-default org-download-image-dir "~/org/Attachments")
  :hook ((org-mode dired-mode) . org-download-enable)
  :bind
  (:map org-mode-map
        (("s-Y" . org-download-screenshot)
         ("s-y" . org-download-yank))))

(when (and (>= emacs-major-version 26) (executable-find "cc"))
  (use-package org-roam
    :diminish
    :ensure t
    :hook (after-init . org-roam-setup)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ("C-c n k" . org-id-get-create)
           ("C-c n v" . org-roam-preview-visit)
           ("C-c n t" . org-roam-dailies-capture-today)
           ("C-c n I" . org-roam-insert-immediate))
    :init
    (setq org-roam-directory "~/org"
          org-roam-v2-ack t)
    :config
    (unless (file-exists-p org-roam-directory)
      (make-directory org-roam-directory))))

(use-package org-roam-ui
    :straight t
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

(use-package org-noter
  :ensure t
  :after org
  :config (setq org-noter-notes-search-path '("~/org")))

(use-package anki-editor
  :ensure t
  :after org
  :bind (:map org-mode-map
              ("<f12>" . anki-editor-cloze-region-auto-incr)
              ("<f11>" . anki-editor-cloze-region-dont-incr)
              ("<f10>" . anki-editor-reset-cloze-number)
              ("<f9>"  . anki-editor-push-tree))
  :hook (org-capture-after-finalize . anki-editor-reset-cloze-number) ; Reset cloze-number after each capture.
  :config
  (setq anki-editor-create-decks t ;; Allow anki-editor to create a new deck if it doesn't exist
        anki-editor-org-tags-as-anki-tags t)

  (defun anki-editor-cloze-region-auto-incr (&optional arg)
"Cloze region without hint and increase card number."
(interactive)
(anki-editor-cloze-region my-anki-editor-cloze-number "")
(setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
    (forward-sexp))
  (defun anki-editor-cloze-region-dont-incr (&optional arg)
    "Cloze region without hint using the previous card number."
    (interactive)
    (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
    (forward-sexp))
  (defun anki-editor-reset-cloze-number (&optional arg)
    "Reset cloze number to ARG or 1"
    (interactive)
    (setq my-anki-editor-cloze-number (or arg 1)))
  (defun anki-editor-push-tree ()
    "Push all notes under a tree."
    (interactive)
    (anki-editor-push-notes '(4))
    (anki-editor-reset-cloze-number))
  ;; Initialize
  (anki-editor-reset-cloze-number)
  )
(use-package org-superstar
  :ensure t
  :hook (org-mode . org-superstar-mode)
  :config
;(set-face-attribute 'org-level-4 nil :weight 'bold :height 1.0) ;\large
;(set-face-attribute 'org-level-3 nil :weight 'bold :height 1.2) ;\large
;(set-face-attribute 'org-level-2 nil :weight 'bold :height 1.44) ;\Large
;(set-face-attribute 'org-level-1 nil :weight 'bold :height 1.728)
  (setq org-superstar-item-bullet-alist '((?- . ?⁍)))
  (setq org-superstar-headline-bullets-list
  '("❀" "❂" "❃" "●"))
  )

(defun +org/opened-buffer-files ()
  "Return the list of files currently opened in emacs"
  (delq nil
        (mapcar (lambda (x)
                  (if (and (buffer-file-name x)
                           (string-match "\\.org$"
                                         (buffer-file-name x)))
                      (buffer-file-name x)))
                (buffer-list))))

(setq org-refile-targets '((+org/opened-buffer-files :maxlevel . 1)))
(setq org-refile-use-outline-path 'file)
;; makes org-refile outline working with helm/ivy
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm)

(use-package deft
  :ensure t
  :defer t
  :bind ("<f8>" . deft)
  :commands (deft)
  :config (setq deft-directory "~/org"
		deft-recursive t
                deft-extensions '("md" "org")))
#+end_src
* Custom
#+begin_src emacs-lisp
(custom-set-variables
  '(evil-undo-system 'undo-tree)
 '(flycheck-warning ((t (:inherit nil :underline nil))))
 '(helm-minibuffer-history-key "M-p")
 '(org-roam-completion-everywhere t)
 '(org-roam-completion-system 'default)
 '(org-roam-db-update-idle-seconds 2))
#+end_src


